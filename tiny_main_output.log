(pass_env) nthucs@NthuRTX3090:~/CVPR_PASS/CVPR21_PASS/Tiny-ImageNet$ python main_tiny.py
Namespace(epochs=101, batch_size=64, print_freq=10, data_name='tiny', total_nc=200, fg_nc=100, task_num=10, learning_rate=0.001, protoAug_weight=10.0, kd_weight=10.0, temp=0.1, gpu='0', save_path='../model_saved_check/')
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
/home/nthucs/miniconda3/envs/pass_env/lib/python3.9/site-packages/torch/optim/lr_scheduler.py:224: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn(
epoch:0,accuracy:0.12960
epoch:10,accuracy:0.50460
epoch:20,accuracy:0.55760
epoch:30,accuracy:0.54220
epoch:40,accuracy:0.56380
epoch:50,accuracy:0.61880
epoch:60,accuracy:0.60240
epoch:70,accuracy:0.59220
epoch:80,accuracy:0.59640
epoch:90,accuracy:0.59300
epoch:100,accuracy:0.59920
0.18250119915931323
/home/nthucs/CVPR_PASS/CVPR21_PASS/Tiny-ImageNet/PASS_tiny.py:142: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.old_model = torch.load(filename)
[100, 101, 102, 103, 104, 105, 106, 107, 108, 109]
[100, 101, 102, 103, 104, 105, 106, 107, 108, 109]
epoch:0,accuracy:0.48473
epoch:10,accuracy:0.51273
epoch:20,accuracy:0.51436
epoch:30,accuracy:0.51400
epoch:40,accuracy:0.51527
epoch:50,accuracy:0.52727
epoch:60,accuracy:0.52855
epoch:70,accuracy:0.52764
epoch:80,accuracy:0.53382
epoch:90,accuracy:0.52527
epoch:100,accuracy:0.52673
[110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
[110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
epoch:0,accuracy:0.47517
epoch:10,accuracy:0.48250
epoch:20,accuracy:0.49633
epoch:30,accuracy:0.48917
epoch:40,accuracy:0.49017
epoch:50,accuracy:0.50133
epoch:60,accuracy:0.50017
epoch:70,accuracy:0.50783
epoch:80,accuracy:0.50383
epoch:90,accuracy:0.49917
epoch:100,accuracy:0.50533
[120, 121, 122, 123, 124, 125, 126, 127, 128, 129]
[120, 121, 122, 123, 124, 125, 126, 127, 128, 129]
epoch:0,accuracy:0.44815
epoch:10,accuracy:0.46631
epoch:20,accuracy:0.48138
epoch:30,accuracy:0.47477
epoch:40,accuracy:0.48062
epoch:50,accuracy:0.49154
epoch:60,accuracy:0.48877
epoch:70,accuracy:0.48708
epoch:80,accuracy:0.48831
epoch:90,accuracy:0.49354
epoch:100,accuracy:0.49169
[130, 131, 132, 133, 134, 135, 136, 137, 138, 139]
[130, 131, 132, 133, 134, 135, 136, 137, 138, 139]
epoch:0,accuracy:0.44186
epoch:10,accuracy:0.46586
epoch:20,accuracy:0.45771
epoch:30,accuracy:0.45871
epoch:40,accuracy:0.45629
epoch:50,accuracy:0.47957
epoch:60,accuracy:0.47943
epoch:70,accuracy:0.47571
epoch:80,accuracy:0.47729
epoch:90,accuracy:0.47743
epoch:100,accuracy:0.47700
[140, 141, 142, 143, 144, 145, 146, 147, 148, 149]
[140, 141, 142, 143, 144, 145, 146, 147, 148, 149]
epoch:0,accuracy:0.41560
epoch:10,accuracy:0.45320
epoch:20,accuracy:0.45120
epoch:30,accuracy:0.45040
epoch:40,accuracy:0.44987
epoch:50,accuracy:0.46373
epoch:60,accuracy:0.46840
epoch:70,accuracy:0.46827
epoch:80,accuracy:0.46413
epoch:90,accuracy:0.46373
epoch:100,accuracy:0.46853
[150, 151, 152, 153, 154, 155, 156, 157, 158, 159]
[150, 151, 152, 153, 154, 155, 156, 157, 158, 159]
epoch:0,accuracy:0.40725
epoch:10,accuracy:0.44088
epoch:20,accuracy:0.43212
epoch:30,accuracy:0.44125
epoch:40,accuracy:0.43788
epoch:50,accuracy:0.45188
epoch:60,accuracy:0.44988
epoch:70,accuracy:0.44575
epoch:80,accuracy:0.44575
epoch:90,accuracy:0.44838
epoch:100,accuracy:0.44975
[160, 161, 162, 163, 164, 165, 166, 167, 168, 169]
[160, 161, 162, 163, 164, 165, 166, 167, 168, 169]
epoch:0,accuracy:0.41141
epoch:10,accuracy:0.43529
epoch:20,accuracy:0.43153
epoch:30,accuracy:0.42565
epoch:40,accuracy:0.41776
epoch:50,accuracy:0.44071
epoch:60,accuracy:0.44353
epoch:70,accuracy:0.44694
epoch:80,accuracy:0.44212
epoch:90,accuracy:0.44576
epoch:100,accuracy:0.44376
[170, 171, 172, 173, 174, 175, 176, 177, 178, 179]
[170, 171, 172, 173, 174, 175, 176, 177, 178, 179]
epoch:0,accuracy:0.40811
epoch:10,accuracy:0.41422
epoch:20,accuracy:0.41978
epoch:30,accuracy:0.41744
epoch:40,accuracy:0.41167
epoch:50,accuracy:0.42878
epoch:60,accuracy:0.43189
epoch:70,accuracy:0.43100
epoch:80,accuracy:0.43222
epoch:90,accuracy:0.43089
epoch:100,accuracy:0.43456
[180, 181, 182, 183, 184, 185, 186, 187, 188, 189]
[180, 181, 182, 183, 184, 185, 186, 187, 188, 189]
epoch:0,accuracy:0.37968
epoch:10,accuracy:0.41011
epoch:20,accuracy:0.41200
epoch:30,accuracy:0.40884
epoch:40,accuracy:0.40621
epoch:50,accuracy:0.42116
epoch:60,accuracy:0.41747
epoch:70,accuracy:0.42137
epoch:80,accuracy:0.41905
epoch:90,accuracy:0.42011
epoch:100,accuracy:0.41916
[190, 191, 192, 193, 194, 195, 196, 197, 198, 199]
[190, 191, 192, 193, 194, 195, 196, 197, 198, 199]
epoch:0,accuracy:0.37050
epoch:10,accuracy:0.39730
epoch:20,accuracy:0.38740
epoch:30,accuracy:0.39690
epoch:40,accuracy:0.40050
epoch:50,accuracy:0.40330
epoch:60,accuracy:0.40240
epoch:70,accuracy:0.40600
epoch:80,accuracy:0.40340
epoch:90,accuracy:0.40250
epoch:100,accuracy:0.40350
############# Test for each Task #############
/home/nthucs/CVPR_PASS/CVPR21_PASS/Tiny-ImageNet/main_tiny.py:67: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load(filename)
[0.5992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0.5066, 0.728, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0.483, 0.592, 0.642, 0, 0, 0, 0, 0, 0, 0, 0]
[0.4644, 0.534, 0.548, 0.666, 0, 0, 0, 0, 0, 0, 0]
[0.4398, 0.53, 0.512, 0.496, 0.742, 0, 0, 0, 0, 0, 0]
[0.418, 0.49, 0.504, 0.526, 0.62, 0.708, 0, 0, 0, 0, 0]
[0.3952, 0.474, 0.484, 0.492, 0.596, 0.552, 0.646, 0, 0, 0, 0]
[0.3868, 0.47, 0.452, 0.472, 0.596, 0.512, 0.524, 0.65, 0, 0, 0]
[0.38, 0.428, 0.45, 0.474, 0.57, 0.544, 0.516, 0.53, 0.51, 0, 0]
[0.364, 0.42, 0.434, 0.424, 0.562, 0.472, 0.508, 0.52, 0.396, 0.588, 0]
[0.3438, 0.398, 0.428, 0.406, 0.542, 0.438, 0.498, 0.492, 0.416, 0.452, 0.562]
[[0.5992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.5066, 0.728, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.483, 0.592, 0.642, 0, 0, 0, 0, 0, 0, 0, 0], [0.4644, 0.534, 0.548, 0.666, 0, 0, 0, 0, 0, 0, 0], [0.4398, 0.53, 0.512, 0.496, 0.742, 0, 0, 0, 0, 0, 0], [0.418, 0.49, 0.504, 0.526, 0.62, 0.708, 0, 0, 0, 0, 0], [0.3952, 0.474, 0.484, 0.492, 0.596, 0.552, 0.646, 0, 0, 0, 0], [0.3868, 0.47, 0.452, 0.472, 0.596, 0.512, 0.524, 0.65, 0, 0, 0], [0.38, 0.428, 0.45, 0.474, 0.57, 0.544, 0.516, 0.53, 0.51, 0, 0], [0.364, 0.42, 0.434, 0.424, 0.562, 0.472, 0.508, 0.52, 0.396, 0.588, 0], [0.3438, 0.398, 0.428, 0.406, 0.542, 0.438, 0.498, 0.492, 0.416, 0.452, 0.562]]
##################################################
Forgetting result:
[0, 9.259999999999991, 12.61, 14.09333333333333, 16.435, 16.384, 18.200000000000003, 18.834285714285713, 18.615, 19.902222222222214, 20.654]
############# Test for up2now Task #############
/home/nthucs/CVPR_PASS/CVPR21_PASS/Tiny-ImageNet/main_tiny.py:116: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model = torch.load(filename)
0.5992
0.5267272727272727
0.5053333333333333
0.4916923076923077
0.477
0.46853333333333336
0.44975
0.44376470588235295
0.43455555555555553
0.4191578947368421
0.4035
average acc: 
0.47447403666009064
